@inject IHttpClientFactory ClientFactory

    <EditForm Model="@Developer" OnValidSubmit="@OnValidSubmit">
        <DataAnnotationsValidator />

        <div class="col-sm-10 row">
            <label class="col-sm-4 font-weight-bold" for="firstname">First Name: </label>
            <input @ref="firstNameText" class="form-control-sm col-sm-4" @bind="@Developer.FirstName" placeholder="first name" id="firstname" required />
            <br />
            <span class="col-sm-5"></span>
            <ValidationMessage For="@(() => Developer.FirstName)"></ValidationMessage>
        </div>
        <br />
        <div class="col-sm-10 row">
            <label class="col-sm-4 font-weight-bold" for="lastname">Last Name: </label>
            <input class="form-control-sm col-sm-4" @bind="@Developer.LastName" placeholder="last name" id="lastname" required />
            <br />
            <span class="col-sm-5"></span>
            <ValidationMessage For="@(() => Developer.LastName)"></ValidationMessage>
        </div>
        <br />
        <div class="col-sm-10 row">
            <label class="col-sm-4 font-weight-bold" for="description">Description: </label>
            <textarea class="form-control-sm col-sm-4 h-100" @bind="@Developer.Description" placeholder="let us know your skillset" id="description" required />
            <br />
            <span class="col-sm-5"></span>
            <ValidationMessage For="@(() => Developer.Description)"></ValidationMessage>
        </div>
        <br />
        <div class="col-sm-10 row">
            <label class="col-sm-4 font-weight-bold" for="email">Email: </label>
            <InputText class="form-control-sm col-sm-4" @bind-Value="@Developer.EmailAddress" placeholder="dh@asix.com" id="email" />
            <br />
            <span class="col-sm-5"></span>
            <ValidationMessage For="@(() => Developer.EmailAddress)"></ValidationMessage>
        </div>
        <br />
        
        <div class="col-sm-10 row">
            <label class="col-sm-4 font-weight-bold" for="city">Country: </label>
            <select class="form-control-sm col-sm-4" @onchange="@CountryClicked" required>
                <option value="">-- Select Country --</option>
                @foreach (var country in countryList)
                {
                    <option value="@country.Code">@country.Description</option>
                }
            </select>
        </div>
        <br />
        <div class="col-sm-10 row">
            <label class="col-sm-4 font-weight-bold" for="city">City: </label>
            <select class="form-control-sm col-sm-4" @onchange="@CityClicked" required>
                <option value="">-- Select City --</option>
                @if (cityList != null)
                {
                    @foreach (var city in cityList)
                    {
                        <option value="@city.Description">@city.Description</option>
                    }
                }
            </select>
        </div>
        <br />
        <div class="col-sm-10 row">
            <label class="col-sm-4 font-weight-bold" for="annualsalary">Annual Salary: </label>
            <InputNumber class="form-control-sm col-sm-4" @bind-Value="@Developer.AnnualSalary" id="annualsalary" />
            <br />
            <span class="col-sm-5"></span>
            <ValidationMessage For="@(() => Developer.AnnualSalary)"></ValidationMessage>
        </div>
        <br />
        <div class="col-sm-10 row">
            <label class="col-sm-4 font-weight-bold" for="opensource">Are you into open source project: </label>
            <InputCheckbox class="form-control-sm" @bind-Value="@Developer.DoesOpenSource" id="opensource" />
        </div>
        <br />
        <div class="col-sm-10 row">
            <label class="col-sm-4 font-weight-bold" for="experience">Experience In Years: </label>
            <InputNumber class="form-control-sm col-sm-4" @bind-Value="@Developer.ExperienceInYears" id="experience" />
        </div>
        <br />
        <div class="col-sm-10 row">
            <span class="col-sm-6"></span>
            <button type="submit" class="form-control-sm col-1 btn btn-success">Save</button>
            <span>&nbsp;</span>
            <button type="reset" class="form-control-sm col-1 btn btn-danger">Clear</button>
        </div>
    </EditForm>

@code {
    [Parameter]
    public Developer Developer { get; set; }

    [Parameter]
    public EventCallback OnValidSubmit { get; set; }

    [Parameter]
    public ElementReference firstNameText { get; set; }


    List<CountryViewModel> countryList = new List<CountryViewModel>();
    List<City> cityList = new List<City>();
    public string countryName { get; set; }
    public string countryCode { get; set; }
    public string cityName { get; set; }

    protected async override Task OnInitializedAsync()
    {
        //cityList = await http.GetJsonAsync<List<City>>("http://localhost:65152/api/City");
        //var baseUrl = @"http://localhost:65152/";
        //var resp = await http.GetStringAsync($"{baseUrl}api/City");
        //cityList = Newtonsoft.Json.JsonConvert.DeserializeObject<List<City>>(resp);

        var http = ClientFactory.CreateClient("dev");
        countryList = await http.GetJsonAsync<List<CountryViewModel>>("api/Country/GetAllCountry");
    }

    protected async void CountryClicked(ChangeEventArgs countryEvent)
    {
        var http = ClientFactory.CreateClient("dev");
        cityList.Clear();
        cityName = string.Empty;
        countryCode = countryEvent.Value.ToString();
        countryName = countryList.FirstOrDefault(s => s.Code == countryCode).Description;
        cityList = await http.GetJsonAsync<List<City>>($"api/City/GetAllCityByCountryCode/{countryCode}");
        Developer.Country = countryName;
        this.StateHasChanged();
    }
    void CityClicked(ChangeEventArgs cityEvent)
    {
        cityName = cityEvent.Value.ToString();
        Developer.City = cityName;
        this.StateHasChanged();
    }
}
